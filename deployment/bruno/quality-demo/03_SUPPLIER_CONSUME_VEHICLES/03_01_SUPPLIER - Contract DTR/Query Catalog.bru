meta {
  name: Query Catalog
  type: http
  seq: 1
}

post {
  url: {{SUPPLIER_EDC}}/{{MANAGEMENT_PATH}}/v3/catalog/request
  body: json
  auth: apikey
}

auth:apikey {
  key: X-API-KEY
  value: {{SUPPLIER_EDC_API_KEY}}
  placement: header
}

body:json {
  {
      "@context": {
          "@vocab": "https://w3id.org/edc/v0.0.1/ns/"
      },
      "@type": "CatalogRequest",
      "protocol": "dataspace-protocol-http",
      "counterPartyAddress": "{{CUSTOMER_EDC_EXT_HOSTNAME}}/{{PROTOCOL_PATH}}",
      "counterPartyId": "{{CUSTOMER_BPNL}}",
      "querySpec": {
          "offset": 0,
          "limit": 100,
          "filter": "",
          "range": {
              "from": 0,
              "to": 100
          }
      }
  }
  
}

tests {
  const assetIdToContract = bru.getVar("CUSTOMER_REGISTRY_ASSET_ID");
  // const assetIdToContract = bru.getVar("CUSTOMER_SM_REPO_ASSET_ID");
  
  var jsonData = res.getBody();
  
  var dataset = jsonData['dcat:dataset'];
  
  test("Verify response contains two data offers", function () {
      expect(dataset).to.be.an("array");
      // dtr, part type information, stock, demand, delivery, production
      expect(dataset.length).to.eq(2);
  });
  
  // as we need it during negotiation
  var offer = '';
  // as it is in the provider catalog
  var datasetOffer = '';
  test("Verify that dtr has been offered (dct:type, cx-common:version)", function () {
      datasetOffer = dataset.find(function (offer) {
          return offer["@id"] === assetIdToContract;
      });
  
      expect(datasetOffer).to.exist;
      expect(datasetOffer["https://w3id.org/catenax/ontology/common#version"]).to.equal("3.0");
  });
  
  
  
  offer = datasetOffer["odrl:hasPolicy"]
  offerId = offer["@id"]
  assetId = datasetOffer.id
  
  offer.offerId = offerId
  delete offer["@id"]
  
  offer.assetId = assetId
  
  offer = {
      "@context": "http://www.w3.org/ns/odrl.jsonld",
      "@type": "odrl:Offer",
      "@id": offerId,
      "assigner": jsonData["dspace:participantId"],
      "odrl:permission": {
          "odrl:target": assetId,
          "odrl:action": {
              "odrl:type": "http://www.w3.org/ns/odrl/2/use"
          },
          "odrl:constraint": datasetOffer["odrl:hasPolicy"]["odrl:permission"]["odrl:constraint"]
      },
      "odrl:prohibition": [],
      "odrl:obligation": [],
      "odrl:target": {
          "@id": assetId
      }
  }
  
  bru.setVar("SUPPLIER_DTR_CATALOG_OFFER", JSON.stringify(offer))
  bru.setVar("SUPPLIER_DTR_CATALOG_OFFER_ID", offerId)
  
  
}
